// <auto-generated />
using System;
using JOIEnergy.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JOIEnergy.Infrastructure.EF.Migrations
{
    [DbContext(typeof(JOIEnergyDbContext))]
    [Migration("20211007133717_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JOIEnergy.Domain.Entity.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("JOIEnergy.Domain.Entity.ElectricityReading", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Reading")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("SmartMeterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SmartMeterId");

                    b.ToTable("ElectricityReadings");
                });

            modelBuilder.Entity("JOIEnergy.Domain.Entity.EnergyCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Supplier")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EnergyCompanies");
                });

            modelBuilder.Entity("JOIEnergy.Domain.Entity.PeakTimeMultiplier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<decimal>("Multiplier")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("PricePlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PricePlanId");

                    b.ToTable("PeakTimeMultipliers");
                });

            modelBuilder.Entity("JOIEnergy.Domain.Entity.PricePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EnergyCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EnergyCompanyId");

                    b.ToTable("PricePlans");
                });

            modelBuilder.Entity("JOIEnergy.Domain.Entity.SmartMeter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EnergyCompanyPricePlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SmartMeterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("SmartMeterId");

                    b.HasIndex("SmartMeterId")
                        .IsUnique();

                    b.ToTable("SmartMeters");
                });

            modelBuilder.Entity("JOIEnergy.Domain.Entity.ElectricityReading", b =>
                {
                    b.HasOne("JOIEnergy.Domain.Entity.SmartMeter", null)
                        .WithMany("ElectricityReadings")
                        .HasForeignKey("SmartMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JOIEnergy.Domain.Entity.PeakTimeMultiplier", b =>
                {
                    b.HasOne("JOIEnergy.Domain.Entity.PricePlan", null)
                        .WithMany("PeakTimeMultipliers")
                        .HasForeignKey("PricePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JOIEnergy.Domain.Entity.PricePlan", b =>
                {
                    b.HasOne("JOIEnergy.Domain.Entity.EnergyCompany", null)
                        .WithMany("PricePlans")
                        .HasForeignKey("EnergyCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JOIEnergy.Domain.Entity.EnergyCompany", b =>
                {
                    b.Navigation("PricePlans");
                });

            modelBuilder.Entity("JOIEnergy.Domain.Entity.PricePlan", b =>
                {
                    b.Navigation("PeakTimeMultipliers");
                });

            modelBuilder.Entity("JOIEnergy.Domain.Entity.SmartMeter", b =>
                {
                    b.Navigation("ElectricityReadings");
                });
#pragma warning restore 612, 618
        }
    }
}
